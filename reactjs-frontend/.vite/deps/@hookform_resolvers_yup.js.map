{
  "version": 3,
  "sources": ["../../node_modules/@hookform/resolvers/src/validateFieldsNatively.ts", "../../node_modules/@hookform/resolvers/src/toNestErrors.ts", "../../node_modules/@hookform/resolvers/yup/src/yup.ts"],
  "sourcesContent": ["import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n", "import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n", "import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport {\n  FieldError,\n  FieldValues,\n  Resolver,\n  appendErrors,\n} from 'react-hook-form';\nimport * as Yup from 'yup';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport function yupResolver<TFieldValues extends FieldValues>(\n  schema:\n    | Yup.ObjectSchema<TFieldValues>\n    | ReturnType<typeof Yup.lazy<Yup.ObjectSchema<TFieldValues>>>,\n  schemaOptions: Parameters<(typeof schema)['validate']>[1] = {},\n  resolverOptions: {\n    /**\n     * @default async\n     */\n    mode?: 'async' | 'sync';\n    /**\n     * Return the raw input values rather than the parsed values.\n     * @default false\n     */\n    raw?: boolean;\n  } = {},\n): Resolver<Yup.InferType<typeof schema>> {\n  return async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.raw ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestErrors(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["setCustomValidity", "ref", "fieldPath", "errors", "error", "get", "message", "reportValidity", "validateFieldsNatively", "options", "fields", "field", "refs", "forEach", "toNestErrors", "shouldUseNativeValidation", "fieldErrors", "path", "Object", "assign", "isNameInFieldArray", "names", "keys", "fieldArrayErrors", "set", "name", "some", "n", "startsWith", "yupResolver", "schema", "schemaOptions", "resolverOptions", "values", "context", "options", "Promise", "resolve", "console", "warn", "mode", "Object", "assign", "abortEarly", "then", "result", "shouldUseNativeValidation", "validateFieldsNatively", "raw", "errors", "r", "e", "inner", "toNestErrors", "error", "validateAllFieldCriteria", "criteriaMode", "reduce", "previous", "path", "message", "type", "types", "messages", "appendErrors", "concat", "reject"]
}
